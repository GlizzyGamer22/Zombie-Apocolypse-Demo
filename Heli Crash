-- Wait for 1 second before executing the script
wait(1)

-- Find the Anchored Objects, LootDrops, and create an empty table for loot items
local anch = Game.Workspace:FindFirstChild("Anchored Objects")
local backpack = Game.Lighting.LootDrops
local lootstuffs = {}

-- Function to spawn a helicopter crash
function SpawnHeliCrash()
    -- Generate a random position for the helicopter crash
    local position = Vector3.new(math.random(-3000,3000),0.6,math.random(-3000,3000))

    -- Check for collisions with existing objects in the region
    local collisions = Game.Workspace:FindPartsInRegion3(Region3.new(position - Vector3.new(60,5,60), position + Vector3.new(60,5,60)))

    for i = 1, #collisions do
        -- If collision is not allowed, recursively call SpawnHeliCrash until a valid position is found
        if not collisions[i]:IsDescendantOf(anch:FindFirstChild("Plates")) and not collisions[i]:IsDescendantOf(anch:FindFirstChild("Trees/Foliage")) then
            SpawnHeliCrash()
            return
        end

        -- Additional checks for specific areas
        if collisions[i]:IsDescendantOf(anch:FindFirstChild("Plates"):FindFirstChild("Hills")) then
            SpawnHeliCrash()
            return
        end
    end

    -- Create a copy of the helicopter crash model and position it
    local helicrash = Game.ServerStorage.HeliCrash:clone()
    helicrash:TranslateBy(position - helicrash:findFirstChild("Baseplate").Position)
    helicrash.Parent = Game.Workspace

    -- Determine the number of loot items to spawn
    local fling = math.random(2,4)
    local ming = 0

    repeat
        ming = ming + 1

        -- Randomly select a loot item based on predefined probabilities
        local ting = math.random(10,395)
        local model = nil

        -- Assign loot based on the random number
        -- ... (omitting for brevity, see the original script for loot assignments)

        -- Translate the loot item to a random position around the helicopter crash
        model:findFirstChild("Head",true).Parent:TranslateBy((helicrash.Baseplate.Position + Vector3.new(40*math.cos(angle), 2, 40*math.sin(angle))) - model:findFirstChild("Head", true).Position)
        model.Parent = Game.Workspace
        model:findFirstChild("Despawn").Value = 18000

        -- Add the loot item to the lootstuffs table
        table.insert(lootstuffs,model)

    until ming == fling
end

-- Function to check if players are away from the helicopter crash
function CheckAway()
    local away = true
    local players = Game.Players:GetChildren()

    for t = 1, #players do
        if players[t].Character:findFirstChild("Torso") and Game.Workspace:findFirstChild("HeliCrash") then
            if (players[t].Character.Torso.Position - Game.Workspace:FindFirstChild("HeliCrash").Baseplate.Position).magnitude <= 300 then
                away = false
            end
        end
    end

    -- If players are away, destroy the helicopter crash and its loot items
    if away then
        if Game.Workspace:findFirstChild("HeliCrash") then
            Game.Workspace:findFirstChild("HeliCrash"):Destroy()
            for um = 1, #lootstuffs do
                lootstuffs[um]:Destroy()
            end
            lootstuffs = {}
        end
    else
        -- If players are nearby, wait for 10 seconds and recursively call CheckAway
        wait(10)
        CheckAway()
    end
end

-- Main loop to spawn helicopter crashes and check for players nearby
while true do
    -- Wait for a random time between 2 to 10 minutes before spawning a helicopter crash
    wait(math.random(120,600))
    SpawnHeliCrash()

    -- Wait for a longer period (20 to 30 minutes) before checking if players are away
    wait(math.random(1200,1800))
    CheckAway()
end
